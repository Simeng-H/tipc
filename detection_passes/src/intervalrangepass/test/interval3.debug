DEBUG: constants found in function define i64 @_tip_main() {
entry:
  %subtmp = sub i64 42, 40
  %gttmp = icmp sgt i64 %subtmp, 42
  %ifcond = icmp ne i1 %gttmp, false
  br i1 %ifcond, label %then1, label %else1

then1:                                            ; preds = %entry
  br label %ifmerge1

else1:                                            ; preds = %entry
  br label %ifmerge1

ifmerge1:                                         ; preds = %else1, %then1
  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
  call void @llvm.donothing()
  %eqtmp = icmp eq i64 %y.0, 42
  %ifcond8 = icmp ne i1 %eqtmp, false
  br i1 %ifcond8, label %then2, label %else2

then2:                                            ; preds = %ifmerge1
  br label %ifmerge2

else2:                                            ; preds = %ifmerge1
  call void @llvm.donothing()
  br label %ifmerge2

ifmerge2:                                         ; preds = %else2, %then2
  call void @llvm.donothing()
  %addtmp = add i64 %z.0, 2
  %subtmp13 = sub i64 %addtmp, %y.0
  %addtmp16 = add i64 %z.0, %addtmp
  %addtmp18 = add i64 %addtmp16, %subtmp13
  ret i64 %addtmp18
}

-->-INF
-->0.000000e+00
-->1.000000e+00
-->2.000000e+00
-->4.000000e+00
-->4.000000e+01
-->4.200000e+01
-->INF
DEBUG: widening bounds for function define i64 @_tip_main() {
entry:
  %subtmp = sub i64 42, 40
  %gttmp = icmp sgt i64 %subtmp, 42
  %ifcond = icmp ne i1 %gttmp, false
  br i1 %ifcond, label %then1, label %else1

then1:                                            ; preds = %entry
  br label %ifmerge1

else1:                                            ; preds = %entry
  br label %ifmerge1

ifmerge1:                                         ; preds = %else1, %then1
  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
  call void @llvm.donothing()
  %eqtmp = icmp eq i64 %y.0, 42
  %ifcond8 = icmp ne i1 %eqtmp, false
  br i1 %ifcond8, label %then2, label %else2

then2:                                            ; preds = %ifmerge1
  br label %ifmerge2

else2:                                            ; preds = %ifmerge1
  call void @llvm.donothing()
  br label %ifmerge2

ifmerge2:                                         ; preds = %else2, %then2
  call void @llvm.donothing()
  %addtmp = add i64 %z.0, 2
  %subtmp13 = sub i64 %addtmp, %y.0
  %addtmp16 = add i64 %z.0, %addtmp
  %addtmp18 = add i64 %addtmp16, %subtmp13
  ret i64 %addtmp18
}

-->-INF
-->0.000000e+00
-->1.000000e+00
-->2.000000e+00
-->4.000000e+00
-->4.000000e+01
-->4.200000e+01
-->INF
DEBUG: initial interval range state for function define i64 @_tip_main() {
entry:
  %subtmp = sub i64 42, 40
  %gttmp = icmp sgt i64 %subtmp, 42
  %ifcond = icmp ne i1 %gttmp, false
  br i1 %ifcond, label %then1, label %else1

then1:                                            ; preds = %entry
  br label %ifmerge1

else1:                                            ; preds = %entry
  br label %ifmerge1

ifmerge1:                                         ; preds = %else1, %then1
  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
  call void @llvm.donothing()
  %eqtmp = icmp eq i64 %y.0, 42
  %ifcond8 = icmp ne i1 %eqtmp, false
  br i1 %ifcond8, label %then2, label %else2

then2:                                            ; preds = %ifmerge1
  br label %ifmerge2

else2:                                            ; preds = %ifmerge1
  call void @llvm.donothing()
  br label %ifmerge2

ifmerge2:                                         ; preds = %else2, %then2
  call void @llvm.donothing()
  %addtmp = add i64 %z.0, 2
  %subtmp13 = sub i64 %addtmp, %y.0
  %addtmp16 = add i64 %z.0, %addtmp
  %addtmp18 = add i64 %addtmp16, %subtmp13
  ret i64 %addtmp18
}

-->  %subtmp13 = sub i64 %addtmp, %y.0 = [+inf,-inf]
-->  call void @llvm.donothing() = [+inf,-inf]
-->  %eqtmp = icmp eq i64 %y.0, 42 = [+inf,-inf]
-->  call void @llvm.donothing() = [+inf,-inf]
-->  %ifcond = icmp ne i1 %gttmp, false = [+inf,-inf]
-->  call void @llvm.donothing() = [+inf,-inf]
-->  %gttmp = icmp sgt i64 %subtmp, 42 = [+inf,-inf]
-->  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ] = [+inf,-inf]
-->  %addtmp18 = add i64 %addtmp16, %subtmp13 = [+inf,-inf]
-->  %addtmp16 = add i64 %z.0, %addtmp = [+inf,-inf]
-->  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ] = [+inf,-inf]
-->  %ifcond8 = icmp ne i1 %eqtmp, false = [+inf,-inf]
-->  %subtmp = sub i64 42, 40 = [+inf,-inf]
-->  %addtmp = add i64 %z.0, 2 = [+inf,-inf]
DEBUG: initial worklist
-->  %subtmp = sub i64 42, 40
-->  %gttmp = icmp sgt i64 %subtmp, 42
-->  %ifcond = icmp ne i1 %gttmp, false
-->  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
-->  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
-->  call void @llvm.donothing()
-->  %eqtmp = icmp eq i64 %y.0, 42
-->  %ifcond8 = icmp ne i1 %eqtmp, false
-->  call void @llvm.donothing()
-->  call void @llvm.donothing()
-->  %addtmp = add i64 %z.0, 2
-->  %subtmp13 = sub i64 %addtmp, %y.0
-->  %addtmp16 = add i64 %z.0, %addtmp
-->  %addtmp18 = add i64 %addtmp16, %subtmp13
DEBUG: analyzing   %subtmp = sub i64 42, 40
--> old value = [+inf,-inf]
--> new value = [2,2]
--> widened = [2,2]
DEBUG: analyzing   %gttmp = icmp sgt i64 %subtmp, 42
--> old value = [+inf,-inf]
--> new value = [0,0]
--> widened = [0,0]
DEBUG: analyzing   %ifcond = icmp ne i1 %gttmp, false
--> old value = [+inf,-inf]
--> new value = [0,0]
--> widened = [0,0]
DEBUG: merging values at node 0x152f16c38
--> phi[0] with lub([+inf,-inf], [2,2]) = [2,2]
--> phi[1] with lub([2,2], [4,4]) = [2,4]
DEBUG: analyzing   %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
--> old value = [+inf,-inf]
--> new value = [2,4]
--> widened = [2,4]
DEBUG: merging values at node 0x152f15c58
--> phi[0] with lub([+inf,-inf], [42,42]) = [42,42]
--> phi[1] with lub([42,42], [2,2]) = [2,42]
DEBUG: analyzing   %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
--> old value = [+inf,-inf]
--> new value = [2,42]
--> widened = [2,42]
DEBUG: analyzing   call void @llvm.donothing()
--> old value = [+inf,-inf]
--> new value = [-inf,+inf]
--> widened = [-inf,+inf]
DEBUG: analyzing   %eqtmp = icmp eq i64 %y.0, 42
--> old value = [+inf,-inf]
--> new value = [0,0]
--> widened = [0,0]
DEBUG: analyzing   %ifcond8 = icmp ne i1 %eqtmp, false
--> old value = [+inf,-inf]
--> new value = [0,0]
--> widened = [0,0]
DEBUG: analyzing   call void @llvm.donothing()
--> old value = [+inf,-inf]
--> new value = [-inf,+inf]
--> widened = [-inf,+inf]
DEBUG: analyzing   call void @llvm.donothing()
--> old value = [+inf,-inf]
--> new value = [-inf,+inf]
--> widened = [-inf,+inf]
DEBUG: analyzing   %addtmp = add i64 %z.0, 2
--> old value = [+inf,-inf]
--> new value = [4,44]
--> widened = [4,+inf]
DEBUG: analyzing   %subtmp13 = sub i64 %addtmp, %y.0
--> old value = [+inf,-inf]
--> new value = [0,+inf]
--> widened = [0,+inf]
DEBUG: analyzing   %addtmp16 = add i64 %z.0, %addtmp
--> old value = [+inf,-inf]
--> new value = [6,+inf]
--> widened = [4,+inf]
DEBUG: analyzing   %addtmp18 = add i64 %addtmp16, %subtmp13
--> old value = [+inf,-inf]
--> new value = [4,+inf]
--> widened = [4,+inf]
*** interval range analysis for function define i64 @_tip_main() {
entry:
  %subtmp = sub i64 42, 40
  %gttmp = icmp sgt i64 %subtmp, 42
  %ifcond = icmp ne i1 %gttmp, false
  br i1 %ifcond, label %then1, label %else1

then1:                                            ; preds = %entry
  br label %ifmerge1

else1:                                            ; preds = %entry
  br label %ifmerge1

ifmerge1:                                         ; preds = %else1, %then1
  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ]
  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ]
  call void @llvm.donothing()
  %eqtmp = icmp eq i64 %y.0, 42
  %ifcond8 = icmp ne i1 %eqtmp, false
  br i1 %ifcond8, label %then2, label %else2

then2:                                            ; preds = %ifmerge1
  br label %ifmerge2

else2:                                            ; preds = %ifmerge1
  call void @llvm.donothing()
  br label %ifmerge2

ifmerge2:                                         ; preds = %else2, %then2
  call void @llvm.donothing()
  %addtmp = add i64 %z.0, 2
  %subtmp13 = sub i64 %addtmp, %y.0
  %addtmp16 = add i64 %z.0, %addtmp
  %addtmp18 = add i64 %addtmp16, %subtmp13
  ret i64 %addtmp18
}
 ***
  %subtmp13 = sub i64 %addtmp, %y.0 = [0,+inf]
  call void @llvm.donothing() = [-inf,+inf]
  %eqtmp = icmp eq i64 %y.0, 42 = [0,0]
  call void @llvm.donothing() = [-inf,+inf]
  %ifcond = icmp ne i1 %gttmp, false = [0,0]
  call void @llvm.donothing() = [-inf,+inf]
  %gttmp = icmp sgt i64 %subtmp, 42 = [0,0]
  %z.0 = phi i64 [ 42, %then1 ], [ %subtmp, %else1 ] = [2,42]
  %addtmp18 = add i64 %addtmp16, %subtmp13 = [4,+inf]
  %addtmp16 = add i64 %z.0, %addtmp = [4,+inf]
  %y.0 = phi i64 [ %subtmp, %then1 ], [ 4, %else1 ] = [2,4]
  %ifcond8 = icmp ne i1 %eqtmp, false = [0,0]
  %subtmp = sub i64 42, 40 = [2,2]
  %addtmp = add i64 %z.0, 2 = [4,+inf]
